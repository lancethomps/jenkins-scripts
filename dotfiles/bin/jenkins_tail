#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
# Originally found through https://gist.github.com/chirauki/e16a7e37e217ce0a345a122dc09bbac1
import re

import argparse
import logging
import sys
import time

from ltpylib import strings
from ltpylib.jenkins_api import create_default_jenkins_api, JenkinsApi
from ltpylib.opts import BaseArgs, create_default_arg_parser, parse_args_and_init_others
from ltpylib.requests_helper import maybe_throw

FINISHED_REGEX = re.compile(r"Finished: ([A-Z]+)$", flags=re.MULTILINE)

class ScriptArgs(BaseArgs):

  def __init__(self, args: argparse.Namespace):
    super().__init__(args)

    self.build_url: str = args.build_url.removesuffix("/")
    self.exit_status: bool = args.exit_status
    self.sleep_time: float = args.sleep_time

    self.api: JenkinsApi = create_default_jenkins_api()
    self.log_text_url: str = self.api.url(f"{self.build_url}/logText/progressiveText")

    if not self.build_url:
      raise ValueError("build_url not supplied")


def main():
  args = _parse_args()

  full_log: str = ""
  start = 0
  while True:
    # noinspection PyBroadException
    try:
      response = maybe_throw(args.api.session.get(f"{args.log_text_url}?start={start}"))
    except Exception:
      response = maybe_throw(args.api.session.get(f"{args.log_text_url}?start={start}"))

    if response.text:
      if args.exit_status:
        full_log += response.text

      sys.stdout.write(response.text)

    x_text_size = response.headers.get("X-Text-Size")
    if not x_text_size:
      logging.debug("Missing X-Text-Size header")
      break

    next_start = int(x_text_size)
    if start == next_start:
      logging.debug("next_start == start")
      time.sleep(args.sleep_time)
      continue

    start = next_start

    x_more_data = response.headers.get("X-More-Data")
    if not x_more_data or not strings.convert_to_bool(x_more_data, unknown_value=False):
      logging.debug("Missing X-More-Data header")
      break

    time.sleep(args.sleep_time)

  if args.exit_status:
    last_lines = "\n".join(full_log.splitlines()[-10:])
    match = FINISHED_REGEX.search(last_lines)
    result = match.group(1) if match else None
    if result == "SUCCESS":
      exit(0)
    elif result:
      logging.error("Exiting with code 1 due to failure: %s", result)
      exit(1)

    if "Finished:" not in last_lines:
      logging.info("Couldn't find Finished: in log, checking API...")
      build = args.api.build_from_full_url(args.build_url)
      result = build.result
      if result == "SUCCESS":
        exit(0)
      else:
        logging.error("Exiting with code 1 due to failure: %s", result)
        exit(1)

    exit(1)


def _parse_args() -> ScriptArgs:
  arg_parser = create_default_arg_parser()

  arg_parser.add_argument("--exit-status", action=argparse.BooleanOptionalAction, default=True)
  arg_parser.add_argument("--sleep-time", type=float, default=1.0)
  arg_parser.add_argument("build_url")

  return ScriptArgs(parse_args_and_init_others(arg_parser))


if __name__ == "__main__":
  try:
    main()
  except KeyboardInterrupt:
    exit(130)
